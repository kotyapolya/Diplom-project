'use client';

import React from 'react';
import { FormProvider, useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import toast from 'react-hot-toast';
import { registerUser } from '@/app/actions';
import { TFormRegisterValues, formRegisterSchema } from './schemas';
import { FormInput } from '../../../form';
import { Button } from '@/shared/components/ui';

interface Props {
  onClose?: VoidFunction;
  onClickLogin?: VoidFunction;
}

export const RegisterForm: React.FC<Props> = ({ onClose, onClickLogin }) => {
  const form = useForm<TFormRegisterValues>({
    resolver: zodResolver(formRegisterSchema),
    defaultValues: {
      email: '',
      fullName: '',
      phone: '',
      password: '',
      confirmPassword: '',
    },
  });

 const sendToCRM = async (data: TFormRegisterValues) => {
  const crmPayload = {
    full_name: data.fullName,
    email: [data.email],
    phone: [data.phone],
    note: '–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ —Å–∞–π—Ç—É',
    // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
  };

  await fetch('/api/crm-user', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(crmPayload),
  });
};



  const onSubmit = async (data: TFormRegisterValues) => {
    try {
      await registerUser({
        email: data.email,
        fullName: data.fullName,
        phone: data.phone,
        password: data.password,
      });

      await sendToCRM(data);

      toast.error('–ù–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π —ñ–º–µ–π–ª –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏—Å—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ —Å–≤–æ—é –ø–æ—à—Ç—Éü§ù', {
        icon: '‚úÖ',
      });

      onClose?.();
    } catch (error) {
      return toast.error('–ù–µ–≤—ñ—Ä–Ω–∏–π E-Mail –∞–±–æ –ø–∞—Ä–æ–ª—å', {
        icon: '‚ùå',
      });
    }
  };

  return (
    <FormProvider {...form}>
      <form className="flex flex-col gap-5" onSubmit={form.handleSubmit(onSubmit)}>
        <FormInput name="email" label="E-Mail" required />
        <FormInput name="fullName" label="–ü–æ–≤–Ω–µ —ñ–º'—è" required />
        <FormInput name="phone" label="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É" required />
        <FormInput name="password" label="–ü–∞—Ä–æ–ª—å" type="password" required />
        <FormInput name="confirmPassword" label="–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å" type="password" required />

        <Button disabled={form.formState.isSubmitting} className="h-12 text-base" type="submit">
        –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å
        </Button>
      </form>
    </FormProvider>
  );
};
